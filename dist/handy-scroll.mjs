/*!
handy-scroll v2.0.4
https://amphiluke.github.io/handy-scroll/
(c) 2025 Amphiluke
*/
const t=new CSSStyleSheet;t.replaceSync(':host{bottom:0;min-height:17px;overflow:auto;position:fixed}.strut{height:1px;overflow:hidden;pointer-events:none;&:before{content:" "}}:host,.strut{font-size:1px;line-height:0;margin:0;padding:0}:host(:state(latent)){bottom:110vh;.strut:before{content:"  "}}:host([viewport]:not([hidden])){display:block}:host([viewport]){position:sticky}:host([viewport]:state(latent)){position:fixed}');let e=t=>`Attribute ‘${t}’ must reference a valid container ‘id’`;class i extends HTMLElement{static get observedAttributes(){return["owner","viewport","hidden"]}#t=null;#e=null;#i=null;#s=null;#h=null;#n=null;#o=!0;#l=!0;get owner(){return this.getAttribute("owner")}set owner(t){this.setAttribute("owner",t)}get viewport(){return this.getAttribute("viewport")}set viewport(t){this.setAttribute("viewport",t)}get#r(){return this.#t.states.has("latent")}set#r(t){this.#t.states[t?"add":"delete"]("latent")}constructor(){super();let e=this.attachShadow({mode:"open"});e.adoptedStyleSheets=[t],this.#s=document.createElement("div"),this.#s.classList.add("strut"),e.appendChild(this.#s),this.#t=this.attachInternals()}connectedCallback(){this.#d(),this.#a(),this.#c(),this.#u(),this.update()}disconnectedCallback(){this.#w(),this.#p(),this.#i=this.#e=null}attributeChangedCallback(t){if(this.#h){if("hidden"===t)return void(this.hasAttribute("hidden")||this.update());"owner"===t?this.#d():"viewport"===t&&this.#a(),this.#w(),this.#p(),this.#c(),this.#u(),this.update()}}#d(){let t=this.getAttribute("owner");if(this.#i=document.getElementById(t),!this.#i)throw new DOMException(e("owner"))}#a(){if(!this.hasAttribute("viewport"))return void(this.#e=window);let t=this.getAttribute("viewport");if(this.#e=document.getElementById(t),!this.#e)throw new DOMException(e("viewport"))}#c(){this.#h=new AbortController;let t={signal:this.#h.signal};this.#e.addEventListener("scroll",(()=>this.#f()),t),this.#e===window&&this.#e.addEventListener("resize",(()=>this.update()),t),this.addEventListener("scroll",(()=>{this.#o&&!this.#r&&this.#v(),this.#o=!0}),t),this.#i.addEventListener("scroll",(()=>{this.#l&&this.#g(),this.#l=!0}),t),this.#i.addEventListener("focusin",(()=>{setTimeout((()=>{this.isConnected&&this.#g()}),0)}),t)}#w(){this.#h?.abort(),this.#h=null}#u(){this.#e!==window&&(this.#n=new ResizeObserver((([t])=>{t.contentBoxSize?.[0]?.inlineSize&&this.update()})),this.#n.observe(this.#e))}#p(){this.#n?.disconnect(),this.#n=null}#v(){let{scrollLeft:t}=this;this.#i.scrollLeft!==t&&(this.#l=!1,this.#i.scrollLeft=t)}#g(){let{scrollLeft:t}=this.#i;this.scrollLeft!==t&&(this.#o=!1,this.scrollLeft=t)}#f(){let t=this.scrollWidth<=this.offsetWidth;if(!t){let e=this.#i.getBoundingClientRect(),i=this.#e===window?window.innerHeight||document.documentElement.clientHeight:this.#e.getBoundingClientRect().bottom;t=e.bottom<=i||e.top>i}this.#r!==t&&(this.#r=t)}update(){let{clientWidth:t,scrollWidth:e}=this.#i,{style:i}=this;i.width=`${t}px`,this.#e===window&&(i.left=`${this.#i.getBoundingClientRect().left}px`),this.#s.style.width=`${e}px`,e>t&&(i.height=this.offsetHeight-this.clientHeight+1+"px"),this.#g(),this.#f()}}customElements.define("handy-scroll",i);export{i as default};